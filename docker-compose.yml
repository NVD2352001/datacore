services:

  ### Services ###
  config-service:
    image: 'trucdulieu/config-service-image'
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:10002/auth-service/deploy" ]
      # test: # with nodejs installed
      #   [
      #     "CMD",
      #     "node",
      #     "-e",
      #     "require('http').get('http://localhost:10002/auth-service/deploy', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"
      #   ]
      timeout: 5s
      interval: 5s
      retries: 10
    restart: unless-stopped
    container_name: config-service
    build:
      context: ./platform/config-service/
    env_file:
      - .env
    volumes:
      - ./config:/trucdulieu/config:ro
      
  discovery-server:
    image: 'trucdulieu/discovery-server-image'
    container_name: discovery-server
    build:
      context: ./platform/discovery-server/
    env_file:
      - .env
    depends_on:
      config-service:
        condition: service_healthy

  api-gateway:
    image: 'trucdulieu/api-gateway-image'
    container_name: api-gateway
    build:
      context: ./platform/api-gateway/
    env_file:
      - .env
    ports:
      - "8080:8080"
    expose:
      - "8080"
    depends_on:
      - discovery-server

  auth-service:
    container_name: auth-service
    image: 'trucdulieu/auth-service-image'
    build:
      context: ./platform/platform/auth-service/
    env_file:
      - .env
    depends_on:
      - discovery-server

  # common-category:
  #   container_name: common-category
  #   image: 'trucdulieu/common-category-image'
  #   build:
  #     context: ./microservices/common-category/
  #   env_file:
  #     - .env
  #   depends_on:
  #     - discovery-server


  ### Dependencies ###
  # postgres-productservice:
  #   container_name: postgres-productservice
  #   image: postgres
  #   environment:
  #     POSTGRES_DB: lab2
  #     POSTGRES_USER: productservice-user
  #     POSTGRES_PASSWORD: 123456
  #     PGDATA: /data/postgres
  #   volumes:
  #     - ./postgres-productservice:/data/postgres
  #   expose:
  #     - "5431"
  #   ports:
  #     - "5431:5431"
  #   command: -p 5431
  #   restart: unless-stopped


  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    # ports:
    #   - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    # ports:
    #   - "9092:9092"
    environment:
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      # KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      # KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   container_name: kafdrop
  #   restart: "no"
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     KAFKA_BROKERCONNECT: "kafka:29092"
  #   depends_on:
  #     - "kafka"

networks:
  nety5:
    driver: bridge